
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 03 10:36:42 EDT 2014
//----------------------------------------------------

package tigerc.syntax.parse;

import tigerc.syntax.absyn.*;
import tigerc.util.List;
import tigerc.util.Pair;
import tigerc.util.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 03 10:36:42 EDT 2014
  */
public class TigerParse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TigerParse() {super();}

  /** Constructor which sets the default scanner. */
  public TigerParse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TigerParse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\006\000\002\003\005\000\002" +
    "\003\006\000\002\003\010\000\002\003\006\000\002\003" +
    "\010\000\002\003\006\000\002\003\012\000\002\003\007" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\006\000\002\007\002\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\011\002\000\002\011\003\000\002\012\003\000\002\012" +
    "\005\000\002\013\002\000\002\013\003\000\002\015\005" +
    "\000\002\014\003\000\002\014\005\000\002\017\003\000" +
    "\002\017\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\022\006\000\002\022\010\000\002\023" +
    "\006\000\002\020\003\000\002\020\004\000\002\030\003" +
    "\000\002\030\005\000\002\030\005\000\002\024\011\000" +
    "\002\024\013\000\002\021\003\000\002\021\004\000\002" +
    "\027\005\000\002\025\002\000\002\025\003\000\002\026" +
    "\003\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\030\004\015\005\013\006\006\012\017\022" +
    "\004\037\014\042\005\043\007\046\016\052\021\053\010" +
    "\001\002\000\030\004\015\005\013\006\006\012\017\022" +
    "\004\037\014\042\005\043\007\046\016\052\021\053\010" +
    "\001\002\000\030\004\015\005\013\006\006\012\017\022" +
    "\004\037\014\042\005\043\007\046\016\052\021\053\010" +
    "\001\002\000\070\002\ufffe\007\ufffe\011\ufffe\013\ufffe\015" +
    "\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\004\173\001" +
    "\002\000\070\002\uffff\007\uffff\011\uffff\013\uffff\015\uffff" +
    "\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\040\uffff\041\uffff\044\uffff\045\uffff\047\uffff\050\uffff\054" +
    "\uffff\055\uffff\056\uffff\001\002\000\034\002\000\021\035" +
    "\022\030\023\041\024\031\025\034\026\033\027\042\030" +
    "\036\031\040\032\032\033\027\034\043\001\002\000\004" +
    "\002\172\001\002\000\070\002\ufffd\007\ufffd\011\ufffd\013" +
    "\ufffd\015\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\047\ufffd" +
    "\050\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\030\004" +
    "\015\005\013\006\006\012\017\022\004\037\014\042\005" +
    "\043\007\046\016\052\021\053\010\001\002\000\102\002" +
    "\uffe2\007\uffe2\011\uffe2\012\141\013\uffe2\014\140\015\uffe2" +
    "\016\137\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002" +
    "\000\010\054\065\055\061\056\062\001\002\000\032\004" +
    "\015\005\013\006\006\012\017\013\uffdb\022\004\037\014" +
    "\042\005\043\007\046\016\052\021\053\010\001\002\000" +
    "\076\002\ufffc\007\ufffc\011\ufffc\013\ufffc\014\022\015\ufffc" +
    "\017\ufffc\020\024\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\023\040\ufffc\041\ufffc\044\ufffc\045\ufffc\047" +
    "\ufffc\050\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\070" +
    "\002\ufffb\007\ufffb\011\ufffb\013\ufffb\015\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\040\ufffb\041" +
    "\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\001\002\000\030\004\015\005\013\006\006\012" +
    "\017\022\004\037\014\042\005\043\007\046\016\052\021" +
    "\053\010\001\002\000\030\004\015\005\013\006\006\012" +
    "\017\022\004\037\014\042\005\043\007\046\016\052\021" +
    "\053\010\001\002\000\004\004\025\001\002\000\076\002" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\070\002\ufff8" +
    "\007\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8\021\035\022" +
    "\030\023\041\024\031\025\034\026\033\027\042\030\036" +
    "\031\040\032\032\033\027\034\043\040\ufff8\041\ufff8\044" +
    "\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\001\002\000\030\004\uffe4\005\uffe4\006\uffe4\012\uffe4\022" +
    "\uffe4\037\uffe4\042\uffe4\043\uffe4\046\uffe4\052\uffe4\053\uffe4" +
    "\001\002\000\030\004\uffed\005\uffed\006\uffed\012\uffed\022" +
    "\uffed\037\uffed\042\uffed\043\uffed\046\uffed\052\uffed\053\uffed" +
    "\001\002\000\030\004\uffeb\005\uffeb\006\uffeb\012\uffeb\022" +
    "\uffeb\037\uffeb\042\uffeb\043\uffeb\046\uffeb\052\uffeb\053\uffeb" +
    "\001\002\000\030\004\uffe5\005\uffe5\006\uffe5\012\uffe5\022" +
    "\uffe5\037\uffe5\042\uffe5\043\uffe5\046\uffe5\052\uffe5\053\uffe5" +
    "\001\002\000\030\004\uffe9\005\uffe9\006\uffe9\012\uffe9\022" +
    "\uffe9\037\uffe9\042\uffe9\043\uffe9\046\uffe9\052\uffe9\053\uffe9" +
    "\001\002\000\030\004\uffea\005\uffea\006\uffea\012\uffea\022" +
    "\uffea\037\uffea\042\uffea\043\uffea\046\uffea\052\uffea\053\uffea" +
    "\001\002\000\030\004\uffee\005\uffee\006\uffee\012\uffee\022" +
    "\uffee\037\uffee\042\uffee\043\uffee\046\uffee\052\uffee\053\uffee" +
    "\001\002\000\030\004\uffe7\005\uffe7\006\uffe7\012\uffe7\022" +
    "\uffe7\037\uffe7\042\uffe7\043\uffe7\046\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\030\004\015\005\013\006\006\012\017\022" +
    "\004\037\014\042\005\043\007\046\016\052\021\053\010" +
    "\001\002\000\030\004\uffe6\005\uffe6\006\uffe6\012\uffe6\022" +
    "\uffe6\037\uffe6\042\uffe6\043\uffe6\046\uffe6\052\uffe6\053\uffe6" +
    "\001\002\000\030\004\uffec\005\uffec\006\uffec\012\uffec\022" +
    "\uffec\037\uffec\042\uffec\043\uffec\046\uffec\052\uffec\053\uffec" +
    "\001\002\000\030\004\uffe8\005\uffe8\006\uffe8\012\uffe8\022" +
    "\uffe8\037\uffe8\042\uffe8\043\uffe8\046\uffe8\052\uffe8\053\uffe8" +
    "\001\002\000\030\004\uffe3\005\uffe3\006\uffe3\012\uffe3\022" +
    "\uffe3\037\uffe3\042\uffe3\043\uffe3\046\uffe3\052\uffe3\053\uffe3" +
    "\001\002\000\070\002\ufff9\007\ufff9\011\ufff9\013\ufff9\015" +
    "\ufff9\017\ufff9\021\035\022\030\023\041\024\031\025\034" +
    "\026\033\027\042\030\036\031\040\032\032\033\027\034" +
    "\043\040\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\034\015\046\021" +
    "\035\022\030\023\041\024\031\025\034\026\033\027\042" +
    "\030\036\031\040\032\032\033\027\034\043\001\002\000" +
    "\076\002\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047" +
    "\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\004" +
    "\013\054\001\002\000\006\013\uffda\050\uffda\001\002\000" +
    "\040\011\052\013\uffd9\021\035\022\030\023\041\024\031" +
    "\025\034\026\033\027\042\030\036\031\040\032\032\033" +
    "\027\034\043\050\uffd9\001\002\000\030\004\015\005\013" +
    "\006\006\012\017\022\004\037\014\042\005\043\007\046" +
    "\016\052\021\053\010\001\002\000\006\013\uffd8\050\uffd8" +
    "\001\002\000\070\002\ufff6\007\ufff6\011\ufff6\013\ufff6\015" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\001\002\000\012\047\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\001\002\000\004\047\134\001\002" +
    "\000\012\047\uffca\054\uffca\055\uffca\056\062\001\002\000" +
    "\012\047\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\004" +
    "\004\124\001\002\000\004\004\112\001\002\000\012\047" +
    "\uffd2\054\065\055\061\056\062\001\002\000\012\047\uffc3" +
    "\054\065\055\uffc3\056\uffc3\001\002\000\004\004\067\001" +
    "\002\000\012\047\uffce\054\uffce\055\uffce\056\uffce\001\002" +
    "\000\004\012\070\001\002\000\006\004\071\013\uffc0\001" +
    "\002\000\004\010\106\001\002\000\010\007\104\013\uffbe" +
    "\017\uffbe\001\002\000\004\013\075\001\002\000\006\013" +
    "\uffbf\017\uffbf\001\002\000\006\010\077\025\076\001\002" +
    "\000\030\004\015\005\013\006\006\012\017\022\004\037" +
    "\014\042\005\043\007\046\016\052\021\053\010\001\002" +
    "\000\004\004\100\001\002\000\004\025\101\001\002\000" +
    "\030\004\015\005\013\006\006\012\017\022\004\037\014" +
    "\042\005\043\007\046\016\052\021\053\010\001\002\000" +
    "\042\021\035\022\030\023\041\024\031\025\034\026\033" +
    "\027\042\030\036\031\040\032\032\033\027\034\043\047" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\042\021\035" +
    "\022\030\023\041\024\031\025\034\026\033\027\042\030" +
    "\036\031\040\032\032\033\027\034\043\047\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\001\002\000\004\004\071\001\002\000" +
    "\006\013\uffbd\017\uffbd\001\002\000\004\004\107\001\002" +
    "\000\010\007\uffc1\013\uffc1\017\uffc1\001\002\000\012\047" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000\004\047\uffd1" +
    "\001\002\000\004\025\113\001\002\000\010\004\114\016" +
    "\115\036\117\001\002\000\012\047\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\001\002\000\006\004\071\017\uffc0\001\002\000" +
    "\012\047\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000\004" +
    "\051\120\001\002\000\004\004\121\001\002\000\012\047" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\004\017\123" +
    "\001\002\000\012\047\uffc7\054\uffc7\055\uffc7\056\uffc7\001" +
    "\002\000\006\010\125\035\126\001\002\000\004\004\130" +
    "\001\002\000\030\004\015\005\013\006\006\012\017\022" +
    "\004\037\014\042\005\043\007\046\016\052\021\053\010" +
    "\001\002\000\042\021\035\022\030\023\041\024\031\025" +
    "\034\026\033\027\042\030\036\031\040\032\032\033\027" +
    "\034\043\047\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000" +
    "\004\035\131\001\002\000\030\004\015\005\013\006\006" +
    "\012\017\022\004\037\014\042\005\043\007\046\016\052" +
    "\021\053\010\001\002\000\042\021\035\022\030\023\041" +
    "\024\031\025\034\026\033\027\042\030\036\031\040\032" +
    "\032\033\027\034\043\047\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\001\002\000\012\047\uffc9\054\uffc9\055\uffc9\056\uffc9\001" +
    "\002\000\032\004\015\005\013\006\006\012\017\022\004" +
    "\037\014\042\005\043\007\046\016\050\uffdb\052\021\053" +
    "\010\001\002\000\004\050\136\001\002\000\070\002\uffef" +
    "\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041\uffef\044" +
    "\uffef\045\uffef\047\uffef\050\uffef\054\uffef\055\uffef\056\uffef" +
    "\001\002\000\006\004\154\017\uffd7\001\002\000\030\004" +
    "\015\005\013\006\006\012\017\022\004\037\014\042\005" +
    "\043\007\046\016\052\021\053\010\001\002\000\032\004" +
    "\015\005\013\006\006\012\017\013\uffdf\022\004\037\014" +
    "\042\005\043\007\046\016\052\021\053\010\001\002\000" +
    "\004\013\uffde\001\002\000\036\007\146\013\uffdd\021\035" +
    "\022\030\023\041\024\031\025\034\026\033\027\042\030" +
    "\036\031\040\032\032\033\027\034\043\001\002\000\004" +
    "\013\145\001\002\000\070\002\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7" +
    "\050\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\030\004" +
    "\015\005\013\006\006\012\017\022\004\037\014\042\005" +
    "\043\007\046\016\052\021\053\010\001\002\000\004\013" +
    "\uffdc\001\002\000\034\015\151\021\035\022\030\023\041" +
    "\024\031\025\034\026\033\027\042\030\036\031\040\032" +
    "\032\033\027\034\043\001\002\000\004\051\152\001\002" +
    "\000\030\004\015\005\013\006\006\012\017\022\004\037" +
    "\014\042\005\043\007\046\016\052\021\053\010\001\002" +
    "\000\070\002\ufff4\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017" +
    "\ufff4\021\035\022\030\023\041\024\031\025\034\026\033" +
    "\027\042\030\036\031\040\032\032\033\027\034\043\040" +
    "\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\004\025\163\001\002\000" +
    "\004\017\uffd6\001\002\000\004\017\162\001\002\000\006" +
    "\007\160\017\uffd4\001\002\000\004\004\154\001\002\000" +
    "\004\017\uffd3\001\002\000\070\002\ufff5\007\ufff5\011\ufff5" +
    "\013\ufff5\015\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\030" +
    "\004\015\005\013\006\006\012\017\022\004\037\014\042" +
    "\005\043\007\046\016\052\021\053\010\001\002\000\036" +
    "\007\uffd5\017\uffd5\021\035\022\030\023\041\024\031\025" +
    "\034\026\033\027\042\030\036\031\040\032\032\033\027" +
    "\034\043\001\002\000\034\021\035\022\030\023\041\024" +
    "\031\025\034\026\033\027\042\030\036\031\040\032\032" +
    "\033\027\034\043\040\166\001\002\000\030\004\015\005" +
    "\013\006\006\012\017\022\004\037\014\042\005\043\007" +
    "\046\016\052\021\053\010\001\002\000\070\002\ufff3\007" +
    "\ufff3\011\ufff3\013\ufff3\015\ufff3\017\ufff3\021\035\022\030" +
    "\023\041\024\031\025\034\026\033\027\042\030\036\031" +
    "\040\032\032\033\027\034\043\040\ufff3\041\170\044\ufff3" +
    "\045\ufff3\047\ufff3\050\ufff3\054\ufff3\055\ufff3\056\ufff3\001" +
    "\002\000\030\004\015\005\013\006\006\012\017\022\004" +
    "\037\014\042\005\043\007\046\016\052\021\053\010\001" +
    "\002\000\070\002\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2" +
    "\017\ufff2\021\035\022\030\023\041\024\031\025\034\026" +
    "\033\027\042\030\036\031\040\032\032\033\027\034\043" +
    "\040\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\001\002\000\004\002\001\001\002" +
    "\000\004\035\174\001\002\000\030\004\015\005\013\006" +
    "\006\012\017\022\004\037\014\042\005\043\007\046\016" +
    "\052\021\053\010\001\002\000\034\021\035\022\030\023" +
    "\041\024\031\025\034\026\033\027\042\030\036\031\040" +
    "\032\032\033\027\034\043\044\176\001\002\000\030\004" +
    "\015\005\013\006\006\012\017\022\004\037\014\042\005" +
    "\043\007\046\016\052\021\053\010\001\002\000\034\021" +
    "\035\022\030\023\041\024\031\025\034\026\033\027\042" +
    "\030\036\031\040\032\032\033\027\034\043\045\200\001" +
    "\002\000\030\004\015\005\013\006\006\012\017\022\004" +
    "\037\014\042\005\043\007\046\016\052\021\053\010\001" +
    "\002\000\070\002\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0" +
    "\017\ufff0\021\035\022\030\023\041\024\031\025\034\026" +
    "\033\027\042\030\036\031\040\032\032\033\027\034\043" +
    "\040\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\001\002\000\034\021\035\022\030" +
    "\023\041\024\031\025\034\026\033\027\042\030\036\031" +
    "\040\032\032\033\027\034\043\045\203\001\002\000\030" +
    "\004\015\005\013\006\006\012\017\022\004\037\014\042" +
    "\005\043\007\046\016\052\021\053\010\001\002\000\070" +
    "\002\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\017\ufff1\021" +
    "\035\022\030\023\041\024\031\025\034\026\033\027\042" +
    "\030\036\031\040\032\032\033\027\034\043\040\ufff1\041" +
    "\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\070\002\ufffa\007\ufffa\011\ufffa\013" +
    "\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\047\ufffa" +
    "\050\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\002\011\003\010\005\017\001\001\000" +
    "\006\003\204\005\017\001\001\000\006\003\201\005\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\164\005\017\001\001\000\002\001" +
    "\001\000\020\016\062\017\055\020\057\021\065\022\054" +
    "\023\056\024\063\001\001\000\012\003\050\005\017\011" +
    "\046\012\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\044\005\017\001\001\000\006\003\025\005" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\043\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\036\001" +
    "\001\000\004\004\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\036\001\001\000" +
    "\010\003\050\005\017\012\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\132\023\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\062\017\110\020" +
    "\057\021\065\022\054\023\056\024\063\001\001\000\006" +
    "\021\107\024\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\072\026\073\027\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\102" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\101\005\017\001\001\000\004\004\036\001\001" +
    "\000\004\004\036\001\001\000\006\026\104\027\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\115\001\001\000\002\001\001\000\010\025\121" +
    "\026\073\027\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\126\005\017\001\001\000\004\004\036\001\001" +
    "\000\002\001\001\000\006\003\131\005\017\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\012\003\050" +
    "\005\017\011\134\012\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\155\014\154\015\156\001\001" +
    "\000\006\003\147\005\017\001\001\000\012\003\142\005" +
    "\017\007\143\010\141\001\001\000\002\001\001\000\004" +
    "\004\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\142\005\017\010\146\001\001\000\002\001\001" +
    "\000\004\004\036\001\001\000\002\001\001\000\006\003" +
    "\152\005\017\001\001\000\004\004\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\160\015\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\163\005\017\001\001\000" +
    "\004\004\036\001\001\000\004\004\036\001\001\000\006" +
    "\003\166\005\017\001\001\000\004\004\036\001\001\000" +
    "\006\003\170\005\017\001\001\000\004\004\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\174\005" +
    "\017\001\001\000\004\004\036\001\001\000\006\003\176" +
    "\005\017\001\001\000\004\004\036\001\001\000\006\003" +
    "\200\005\017\001\001\000\004\004\036\001\001\000\004" +
    "\004\036\001\001\000\006\003\203\005\017\001\001\000" +
    "\004\004\036\001\001\000\004\004\036\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TigerParse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TigerParse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TigerParse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  // Methods and variables to be placed within the generated parser class

  private tigerc.util.ErrorMsg errorMsg;

  public void syntax_error (java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error (String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

 
  public TigerParse (java_cup.runtime.Scanner lexer, 
                     tigerc.util.ErrorMsg errorMsg) {
    super(lexer);
    this.errorMsg = errorMsg;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TigerParse$actions {

 
  // Methods and variables to be placed in the "actions" class of the parser
  public tigerc.util.Symbol sym(String s) { 
    return tigerc.util.Symbol.symbol(s); 
  }

  private final TigerParse parser;

  /** Constructor */
  CUP$TigerParse$actions(TigerParse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TigerParse$do_action(
    int                        CUP$TigerParse$act_num,
    java_cup.runtime.lr_parser CUP$TigerParse$parser,
    java.util.Stack            CUP$TigerParse$stack,
    int                        CUP$TigerParse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TigerParse$result;

      /* select the action based on the action number */
      switch (CUP$TigerParse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tyfields_one_or_more ::= tyfield COMMA tyfields_one_or_more 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Pair<Symbol,Symbol> p = (Pair<Symbol,Symbol>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Pair<Symbol,Symbol>>(p, ps); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfields_one_or_more",20, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tyfields_one_or_more ::= tyfield 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Symbol> p = (Pair<Symbol,Symbol>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Pair<Symbol,Symbol>>(p, null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfields_one_or_more",20, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tyfield_list ::= tyfields_one_or_more 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Symbol>> tfs = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = tfs; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield_list",19, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tyfield_list ::= 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		  RESULT = null; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield_list",19, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tyfield ::= ID COLON ID 
            {
              Pair<Symbol,Symbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new Pair<Symbol,Symbol>(sym(i),sym(tid)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield",21, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // one_or_more_fn_decls ::= decl_fn one_or_more_fn_decls 
            {
              List<DeclFn> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		DeclFn df = (DeclFn)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dfsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclFn> dfs = (List<DeclFn>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<DeclFn>(df, dfs); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_fn_decls",15, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // one_or_more_fn_decls ::= decl_fn 
            {
              List<DeclFn> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclFn df = (DeclFn)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<DeclFn>(df, null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_fn_decls",15, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decl_fn ::= FUNCTION ID LPAREN tyfield_list RPAREN COLON ID EQ exp 
            {
              DeclFn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int rtyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int rtyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String rty = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclFn(fleft, sym(i), ps, new TyName(rtyleft, sym(rty)), body) ; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_fn",18, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decl_fn ::= FUNCTION ID LPAREN tyfield_list RPAREN EQ exp 
            {
              DeclFn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclFn(fleft, sym(i), ps, null, body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_fn",18, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= ARRAY OF ID 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new TyArray(aleft, sym(tid)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= LBRACE tyfield_list RBRACE 
            {
              Ty RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tysleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int tysright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Pair<Symbol,Symbol>> tys = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = new TyRecord(lleft, tys); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ID 
            {
              Ty RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new TyName(tidleft, sym(tid)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // one_or_more_ty_decls ::= decl_ty one_or_more_ty_decls 
            {
              List<DeclTy> RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		DeclTy dt = (DeclTy)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclTy> dts = (List<DeclTy>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<DeclTy>(dt, dts); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_ty_decls",14, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // one_or_more_ty_decls ::= decl_ty 
            {
              List<DeclTy> RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclTy dt = (DeclTy)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<DeclTy>(dt,null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_ty_decls",14, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decl_ty ::= TYPE ID EQ type 
            {
              DeclTy RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclTy(tpleft, sym(i), t); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_ty",17, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decl_var ::= VAR ID COLON ID ASSIGN exp 
            {
              DeclVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclVar(vleft, sym(name), sym(t), init); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_var",16, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decl_var ::= VAR ID ASSIGN exp 
            {
              DeclVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclVar(vleft, sym(name), null, init); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_var",16, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decl ::= one_or_more_fn_decls 
            {
              Decl RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclFn> df = (List<DeclFn>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclGroupFunction(dfleft, df); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl ::= one_or_more_ty_decls 
            {
              Decl RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclTy> dt = (List<DeclTy>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclGroupType(dtleft, dt); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl ::= decl_var 
            {
              Decl RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclVar dv = (DeclVar)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = dv; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl_list ::= decl decl_list 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Decl> ds = (List<Decl>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Decl>(d,ds) ; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl_list ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Decl>(d,null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fieldexps_one_or_more ::= field_exp COMMA fieldexps_one_or_more 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Pair<Symbol,Exp> fe = (Pair<Symbol,Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int fesleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int fesright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Exp>> fes = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Pair<Symbol,Exp>>(fe, fes); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("fieldexps_one_or_more",10, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fieldexps_one_or_more ::= field_exp 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Exp> fe = (Pair<Symbol,Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Pair<Symbol,Exp>>(fe,null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("fieldexps_one_or_more",10, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_exp ::= ID EQ exp 
            {
              Pair<Symbol,Exp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new Pair<Symbol,Exp>(sym(f), e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp",11, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_exp_list ::= fieldexps_one_or_more 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Exp>> es = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp_list",9, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_exp_list ::= 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		  RESULT = null;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp_list",9, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // seq_one_or_more ::= exp SEMICOLON seq_one_or_more 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Exp>(e,es); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("seq_one_or_more",8, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // seq_one_or_more ::= exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Exp>(e,null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("seq_one_or_more",8, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_seq ::= seq_one_or_more 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_seq",7, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_seq ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = null; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_seq",7, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args_one_or_more ::= exp COMMA args_one_or_more 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new List<Exp>(e,es); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("args_one_or_more",6, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // args_one_or_more ::= exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new List<Exp>(e,null); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("args_one_or_more",6, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arg_list ::= args_one_or_more 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("arg_list",5, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arg_list ::= 
            {
              List<Exp> RESULT =null;
		  RESULT = null;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("arg_list",5, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lvalue ::= lvalue LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
              RESULT = new VarSubscript(ileft,v,i); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lvalue",3, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  
              RESULT = new VarField(xleft, v, sym(x)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lvalue",3, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lvalue ::= ID 
            {
              Var RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new VarSimple(xleft, sym(x)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lvalue",3, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b_op ::= OR 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.OR; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b_op ::= AND 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.AND; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b_op ::= GE 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.GE; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // b_op ::= GT 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.GT; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b_op ::= LE 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.LE; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b_op ::= LT 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.LT; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b_op ::= NEQ 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.NE; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b_op ::= EQ 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.EQ; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b_op ::= DIVIDE 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.DIV; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b_op ::= TIMES 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.MUL; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_op ::= MINUS 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.MIN; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_op ::= PLUS 
            {
              ExpOp.Op RESULT =null;
		 RESULT = ExpOp.Op.PLUS; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("b_op",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= LET decl_list IN exp_seq END 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		List<Decl> ds = (List<Decl>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> body = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = new ExpLet(lleft, ds, new ExpSeq(bodyleft, body)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp hi = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpFor(fleft, sym(i), lo, hi, body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpWhile(wleft, t, body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpIfElse(ileft, t, e1, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpIf(ileft, t, e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= ID LBRACK exp RBRACK OF exp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int szleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int szright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Exp sz = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpArray(tleft, sym(t), sz, init); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ID LBRACE field_exp_list RBRACE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Pair<Symbol,Exp>> fs = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = new ExpRecord(tleft, sym(t), fs); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= LPAREN exp_seq RPAREN 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = null; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= ID LPAREN arg_list RPAREN 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> vs = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = new ExpCall(fleft, sym(f), vs); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= lvalue ASSIGN exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpAssign(vleft,v,e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp b_op exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		ExpOp.Op op = (ExpOp.Op)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpOp(opleft, e1, op, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT= new ExpOp(mleft, new ExpInt(eleft, 0), 
                                    ExpOp.Op.MIN, e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpBreak(bleft); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= lvalue 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpVar(vleft,v); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpString(sleft, s); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= INT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpInt(ileft, i.intValue()); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= NIL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpNil(nleft); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = e; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		RESULT = start_val;
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TigerParse$parser.done_parsing();
          return CUP$TigerParse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

